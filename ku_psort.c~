#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

void Sorting(int* sort_list,int len);

int main(int argc,char* argv[])
{
	// init File
	int m = atoi(argv[1]);
	int n = atoi(argv[2]);
	char* input_file = argv[3];
	char* output_file = argv[4];

	printf("M : %d\n",m);
	printf("N : %d\n", n);
	printf("Input File name is : %s\n", input_file);
	printf("Output File name is : %s \n", output_file);

	// read input file
	FILE * In = fopen(input_file, "r");
	int input_buff;
	int div = (int)(m / n);
	
	// count
	int Process_count = 0;
	int * toSort_data = (int*) malloc (sizeof(int)*(m -div*(n-1)));
	pid_t * pid = (pid_t*)malloc(sizeof(pid_t) * n);
	int len = div;
	int read_index;

	pid[0] = fork();
	Process_count ++;
	if(pid[0] > 0){
		printf("This is Root Parent \n");
	}
	else if(pid[0] == 0){
		while(Process_count < n){
			printf("Process_count : %d [ ",Process_count);
			read_index = 0;
			while(read_index<div && fscanf(In,"%d",&input_buff) != EOF){
				toSort_data[read_index] = input_buff;
				printf("%d ",toSort_data[read_index]);
				read_index ++;
			}
			printf("]\n");
			pid[Process_count] = fork();
			printf("%d\n",pid[Process_count]);
			if(pid[Process_count] > 0) {
				break;				
			}
			Process_count ++;
		}

		if(n == Process_count){
			read_index = 0;
			len = m - div*(n-1);
			printf("Process_count : %d [ ", Process_count);
			while(fscanf(In,"%d",&input_buff) != EOF){
				toSort_data[read_index] = input_buff;
				printf("%d ", toSort_data[read_index]);
				read_index++;
			}
			printf("]\n");
			

		}
		// Merge sort with message
		Sorting(toSort_data, len);
		int i;
		printf("Process_count : %d #After sort# [ ",Process_count);
		for(i=0;i<len;i++)printf("%d ",toSort_data[i]);
		printf("]\n");
	}
	free(toSort_data);
	fclose(In);
	free(pid);
	return 0;
}

// Linked List
typedef struct _node{
	int value;
	struct _node* next;
}node;

typedef struct _LinkedList{
	int count;
	node* head;
	node* tail;
}list;

void init(list* lp){
	lp->count = 0;
	lp->head = NULL;
	lp->tail = NULL;
}

void addLast(list* lp, int value){
	node* newNode = (node*)malloc(sizeof(node));
	newNode->value = value;
	newNode->next = NULL;
	if(lp->count == 0){
		lp->head = newNode;
		lp->tail = newNode;
	}
	else{
		lp->tail->next = newNode;
		lp->tail = newNode;
	}
	lp->count++;
}

int isEmpty(list* lp){
	if(lp->count == 0)return 1;
	return 0;
}

int removeFirst(list* lp){
	if(lp->count == 0) return -1;
	int value = lp->head->value;
	lp->head = lp->head->next;
	lp->count--;
	return value;
}

// Radix Sort 0~9
void Sorting(int* sort_list, int len)
{
	printf("UU");
	int Radix, i, divi;
	for(Radix = 0;Radix<10;Radix++){
		// Radix sort init
		list** RS_list = (list**)malloc(sizeof(list*)*10);
		for(i=0;i<10;i++)RS_list[i] = (list*)malloc(sizeof(list));
		divi =1;
		for(i=0;i<Radix;i++)divi*=10;
		// insert with Radix leaf
		for(i=0;i<len;i++){
			int data = (sort_list[i]/divi)%10;
			addLast(RS_list[data],sort_list[i]);
		}
		if(RS_list[0]->count == len) break;
		// pop all and save
		int index = 0;
		for(i=0;i<10;i++){
			while(!isEmpty(RS_list[i])){
				sort_list[index] = removeFirst(RS_list[i]);
				printf("%d ",sort_list[index]);
				index++;
			}
		}
		// free all
		for(i =0;i<10;i++) free(RS_list[i]);
		free(RS_list);
	}
}
